// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Paper Specs

model PaperDomain {
  id                    Int                     @id @default(autoincrement())
  name                  String
  Product               Product[]
  DiscountRateCondition DiscountRateCondition[]
}

model Manufacturer {
  id                    Int                     @id @default(autoincrement())
  name                  String
  product               Product[]
  DiscountRateCondition DiscountRateCondition[]
}

model PaperGroup {
  id                    Int                     @id @default(autoincrement())
  name                  String
  product               Product[]
  DiscountRateCondition DiscountRateCondition[]
}

model PaperType {
  id                    Int                     @id @default(autoincrement())
  name                  String
  product               Product[]
  DiscountRateCondition DiscountRateCondition[]
}

model PaperColorGroup {
  id                     Int                      @id @default(autoincrement())
  name                   String
  Stock                  Stock[]
  StockGroup             StockGroup[]
  Invoice                Invoice[]
  OrderStock             OrderStock[]
  OfficialPriceCondition OfficialPriceCondition[]
  DiscountRateCondition  DiscountRateCondition[]
}

model PaperColor {
  id                     Int                      @id @default(autoincrement())
  name                   String
  Stock                  Stock[]
  StockGroup             StockGroup[]
  Invoice                Invoice[]
  OrderStock             OrderStock[]
  OfficialPriceCondition OfficialPriceCondition[]
  DiscountRateCondition  DiscountRateCondition[]
}

model PaperPattern {
  id                     Int                      @id @default(autoincrement())
  name                   String
  Stock                  Stock[]
  StockGroup             StockGroup[]
  Invoice                Invoice[]
  OrderStock             OrderStock[]
  OfficialPriceCondition OfficialPriceCondition[]
  DiscountRateCondition  DiscountRateCondition[]
}

model PaperCert {
  id                     Int                      @id @default(autoincrement())
  name                   String
  Stock                  Stock[]
  StockGroup             StockGroup[]
  Invoice                Invoice[]
  OrderStock             OrderStock[]
  OfficialPriceCondition OfficialPriceCondition[]
  DiscountRateCondition  DiscountRateCondition[]
}

enum PackagingType {
  SKID
  REAM
  BOX
  ROLL
}

model Packaging {
  id         Int           @id @default(autoincrement())
  name       String
  type       PackagingType
  packA      Int
  packB      Int
  stock      Stock[]
  StockGroup StockGroup[]
  Invoice    Invoice[]
  OrderStock OrderStock[]

  @@unique([type, packA, packB])
}

model Product {
  id                     Int                      @id @default(autoincrement())
  paperDomainId          Int
  paperDomain            PaperDomain              @relation(fields: [paperDomainId], references: [id])
  manufacturerId         Int
  manufacturer           Manufacturer             @relation(fields: [manufacturerId], references: [id])
  paperGroupId           Int
  paperGroup             PaperGroup               @relation(fields: [paperGroupId], references: [id])
  paperTypeId            Int
  paperType              PaperType                @relation(fields: [paperTypeId], references: [id])
  stock                  Stock[]
  StockGroup             StockGroup[]
  Invoice                Invoice[]
  OrderStock             OrderStock[]
  OfficialPriceCondition OfficialPriceCondition[]

  @@index([paperDomainId], type: BTree)
  @@index([manufacturerId], type: BTree)
  @@index([paperGroupId], type: BTree)
  @@index([paperTypeId], type: BTree)
}

// Warehouse

model Warehouse {
  id         Int          @id @default(autoincrement())
  name       String
  code       String?
  address    String       @default("") @db.VarChar(500)
  companyId  Int
  company    Company      @relation(fields: [companyId], references: [id])
  isPublic   Boolean
  isDeleted  Boolean      @default(false)
  stock      Stock[]
  StockGroup StockGroup[]
  OrderStock OrderStock[]

  @@unique([companyId, code])
}

// Stock

model Stock {
  id                      Int              @id @default(autoincrement())
  serial                  String           @unique
  companyId               Int
  company                 Company          @relation(fields: [companyId], references: [id])
  warehouseId             Int?
  warehouse               Warehouse?       @relation(fields: [warehouseId], references: [id])
  productId               Int
  product                 Product          @relation(fields: [productId], references: [id])
  packagingId             Int
  packaging               Packaging        @relation(fields: [packagingId], references: [id])
  grammage                Int
  sizeX                   Int
  sizeY                   Int
  paperColorGroupId       Int?
  paperColorGroup         PaperColorGroup? @relation(fields: [paperColorGroupId], references: [id])
  paperColorId            Int?
  paperColor              PaperColor?      @relation(fields: [paperColorId], references: [id])
  paperPatternId          Int?
  paperPattern            PaperPattern?    @relation(fields: [paperPatternId], references: [id])
  paperCertId             Int?
  paperCert               PaperCert?       @relation(fields: [paperCertId], references: [id])
  stockEvent              StockEvent[]
  cachedQuantity          Int              @default(0)
  cachedQuantityAvailable Int              @default(0)
  isDeleted               Boolean          @default(false)
  isSyncPrice             Boolean          @default(false)
  stockPrice              StockPrice?

  initialOrderId Int?
  initialOrder   Order? @relation(fields: [initialOrderId], references: [id])

  @@index([packagingId], type: BTree)
  @@index([paperColorGroupId], type: BTree)
  @@index([paperColorId], type: BTree)
  @@index([paperPatternId], type: BTree)
  @@index([paperCertId], type: BTree)
}

model StockPrice {
  stockId           Int
  stock             Stock             @relation(fields: [stockId], references: [id])
  officialPriceType OfficialPriceType @default(NONE)
  officialPrice     Float             @default(0)
  officialPriceUnit PriceUnit
  discountType      DiscountType      @default(DEFAULT)
  unitPrice         Float
  discountPrice     Float             @default(0)
  unitPriceUnit     PriceUnit

  @@id([stockId])
}

enum StockEventStatus {
  NORMAL
  CANCELLED
  PENDING
}

model StockEvent {
  id                Int              @id @default(autoincrement())
  stockId           Int
  stock             Stock            @relation(fields: [stockId], references: [id])
  change            Int
  status            StockEventStatus
  orderStockArrival OrderStock[] // 입고 예정 재고의 정상 매입
  planIn            Plan[]           @relation("StockEventInPlan")
  planOut           Plan[]           @relation("StockEventOutPlan")

  @@unique([id, stockId])
}

model StockGroup {
  id                Int               @id @default(autoincrement())
  productId         Int
  product           Product           @relation(fields: [productId], references: [id])
  packagingId       Int
  packaging         Packaging         @relation(fields: [packagingId], references: [id])
  grammage          Int
  sizeX             Int
  sizeY             Int
  paperColorGroupId Int?
  paperColorGroup   PaperColorGroup?  @relation(fields: [paperColorGroupId], references: [id])
  paperColorId      Int?
  paperColor        PaperColor?       @relation(fields: [paperColorId], references: [id])
  paperPatternId    Int?
  paperPattern      PaperPattern?     @relation(fields: [paperPatternId], references: [id])
  paperCertId       Int?
  paperCert         PaperCert?        @relation(fields: [paperCertId], references: [id])
  warehouseId       Int?
  warehouse         Warehouse?        @relation(fields: [warehouseId], references: [id])
  orderStockId      Int?
  orderStock        OrderStock?       @relation("OrderStockStockGroup", fields: [orderStockId], references: [id])
  companyId         Int
  company           Company           @relation(fields: [companyId], references: [id])
  isArrived         Boolean?
  stockGroupEvent   StockGroupEvent[]
  orderStocks       OrderStock[]
  stockGroupPrice   StockGroupPrice[]

  @@unique([productId, packagingId, grammage, sizeX, sizeY, paperColorGroupId, paperColorId, paperPatternId, paperCertId, warehouseId, orderStockId, companyId])
}

enum StockGroupEventStatus {
  NORMAL
  CANCELLED
  PENDING
}

model StockGroupEvent {
  id           Int                   @id @default(autoincrement())
  change       Int
  status       StockGroupEventStatus
  stockGroupId Int
  stockGroup   StockGroup            @relation(fields: [stockGroupId], references: [id])
  Plan         Plan?
  planId       Int?
}

model StockGroupPrice {
  stockGruopId      Int               @id
  stockGroup        StockGroup        @relation(fields: [stockGruopId], references: [id])
  officialPriceType OfficialPriceType @default(NONE)
  officialPrice     Float             @default(0)
  officialPriceUnit PriceUnit
  discountType      DiscountType      @default(DEFAULT)
  unitPrice         Float
  discountPrice     Float             @default(0)
  unitPriceUnit     PriceUnit
}

// User

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  name      String
  email     String?
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
}

// Company & Client

model Company {
  id                             Int                           @id @default(autoincrement())
  businessName                   String
  companyRegistrationNumber      String
  phoneNo                        String                        @default("")
  faxNo                          String                        @default("")
  email                          String                        @default("")
  representative                 String                        @default("")
  invoiceCode                    String
  address                        String                        @default("") @db.VarChar(500)
  managedById                    Int?
  managedBy                      Company?                      @relation("CompanyManagedBy", fields: [managedById], references: [id])
  srcBusinessRelationship        BusinessRelationship[]        @relation("srcBusinessRelationship")
  dstBusinessRelationship        BusinessRelationship[]        @relation("dstBusinessRelationship")
  srcOrder                       Order[]                       @relation("srcOrderCompany")
  dstOrder                       Order[]                       @relation("dstOrderCompany")
  user                           User[]
  officialPrice                  OfficialPriceMap[]
  warehouse                      Warehouse[]
  location                       Location[]
  stock                          Stock[]
  srcBusinessRelationshipRequest BusinessRelationshipRequest[] @relation("srcBusinessRelationshipRequest")
  dstBusinessRelationshipRequest BusinessRelationshipRequest[] @relation("dstBusinessRelationshipRequest")
  managingCompany                Company[]                     @relation("CompanyManagedBy")
  OrderSrockTradePrice           OrderStockTradePrice[]
  Plan                           Plan[]
  Shipping                       Shipping[]
  StockGroup                     StockGroup[]
  TradePrice                     TradePrice[]
  OrderStockTradeAltBundle       OrderStockTradeAltBundle[]
  Partner                        Partner[]
  BankAccount                    BankAccount[]
  Card                           Card[]
}

model BusinessRelationship {
  srcCompanyId Int
  srcCompany   Company @relation("srcBusinessRelationship", fields: [srcCompanyId], references: [id])
  dstCompanyId Int
  dstCompany   Company @relation("dstBusinessRelationship", fields: [dstCompanyId], references: [id])
  isActivated  Boolean @default(true)

  @@id([srcCompanyId, dstCompanyId])
}

enum BusinessRelationshipRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model BusinessRelationshipRequest {
  srcCompanyId Int
  srcCompany   Company                           @relation("srcBusinessRelationshipRequest", fields: [srcCompanyId], references: [id])
  dstCompanyId Int
  dstCompany   Company                           @relation("dstBusinessRelationshipRequest", fields: [dstCompanyId], references: [id])
  status       BusinessRelationshipRequestStatus
  isPurchase   Boolean                           @default(false)
  isSales      Boolean                           @default(false)
  memo         String

  @@unique([srcCompanyId, dstCompanyId])
}

model Location {
  id         Int          @id @default(autoincrement())
  name       String
  code       String?
  address    String       @default("") @db.VarChar(500)
  companyId  Int
  company    Company      @relation(fields: [companyId], references: [id])
  isPublic   Boolean
  isDeleted  Boolean      @default(false)
  orderStock OrderStock[] // 정상거래의 도착지

  @@unique([companyId, code])
}

// Prices

enum OfficialPriceType {
  NONE
  MANUAL_NONE
  RETAIL
  WHOLESALE
}

enum DiscountType {
  NONE
  MANUAL_NONE
  DEFAULT
  SPECIAL
}

enum PriceUnit {
  WON_PER_TON
  WON_PER_REAM
  WON_PER_BOX
}

// 고시가
enum OfficialPriceMapType {
  WHOLESALE
  RETAIL
}

model OfficialPriceCondition {
  id                Int                @id @default(autoincrement())
  productId         Int
  product           Product            @relation(fields: [productId], references: [id])
  grammage          Int
  sizeX             Int
  sizeY             Int
  paperColorGroupId Int?
  paperColorGroup   PaperColorGroup?   @relation(fields: [paperColorGroupId], references: [id])
  paperColorId      Int?
  paperColor        PaperColor?        @relation(fields: [paperColorId], references: [id])
  paperPatternId    Int?
  paperPattern      PaperPattern?      @relation(fields: [paperPatternId], references: [id])
  paperCertId       Int?
  paperCert         PaperCert?         @relation(fields: [paperCertId], references: [id])
  officialPriceMap  OfficialPriceMap[]
}

model OfficialPriceMap {
  id                       Int                    @id @default(autoincrement())
  officialPriceConditionId Int
  officialPriceCondition   OfficialPriceCondition @relation(fields: [officialPriceConditionId], references: [id])
  companyId                Int
  company                  Company                @relation(fields: [companyId], references: [id])
  officialPriceMapType     OfficialPriceMapType
  officialPrice            Float
  officialPriceUnit        PriceUnit
  isDeleted                Boolean                @default(false)
}

// Order

enum OrderStatus {
  ORDER_PREPARING
  ORDER_REQUESTED
  ORDER_REJECTED
  OFFER_PREPARING
  OFFER_REQUESTED
  OFFER_REJECTED
  ACCEPTED
  ORDER_CANCELLED
  OFFER_CANCELLED
}

model Order {
  id                     Int          @id @default(autoincrement())
  orderNo                String       @unique
  srcCompanyId           Int
  srcCompany             Company      @relation("srcOrderCompany", fields: [srcCompanyId], references: [id])
  dstCompanyId           Int
  dstCompany             Company      @relation("dstOrderCompany", fields: [dstCompanyId], references: [id])
  status                 OrderStatus  @default(ORDER_PREPARING)
  isEntrusted            Boolean      @default(false)
  memo                   String
  wantedDate             DateTime?
  stockAcceptedCompanyId Int?
  isStockRejected        Boolean      @default(false)
  orderStock             OrderStock?
  tradePrice             TradePrice[]
  stock                  Stock[]
}

model OrderStock {
  id                Int              @id @default(autoincrement())
  orderId           Int              @unique
  order             Order            @relation(fields: [orderId], references: [id])
  dstLocationId     Int?
  dstLocation       Location?        @relation(fields: [dstLocationId], references: [id])
  planId            Int?             @unique
  plan              Plan?            @relation(fields: [planId], references: [id])
  // 정상매입의 입고 예정 재고 이벤트
  arrivalStockEvent StockEvent[]
  // 정상거래의 주문 원지 정보
  warehouseId       Int?
  warehouse         Warehouse?       @relation(fields: [warehouseId], references: [id])
  orderStockId      Int?
  orderStock        OrderStock?      @relation("orig", fields: [orderStockId], references: [id])
  productId         Int
  product           Product          @relation(fields: [productId], references: [id])
  packagingId       Int
  packaging         Packaging        @relation(fields: [packagingId], references: [id])
  grammage          Int
  sizeX             Int
  sizeY             Int
  paperColorGroupId Int?
  paperColorGroup   PaperColorGroup? @relation(fields: [paperColorGroupId], references: [id])
  paperColorId      Int?
  paperColor        PaperColor?      @relation(fields: [paperColorId], references: [id])
  paperPatternId    Int?
  paperPattern      PaperPattern?    @relation(fields: [paperPatternId], references: [id])
  paperCertId       Int?
  paperCert         PaperCert?       @relation(fields: [paperCertId], references: [id])
  quantity          Int              @default(0)
  stockGroups       StockGroup[]     @relation("OrderStockStockGroup")
  StockGroup        StockGroup?      @relation(fields: [stockGroupId], references: [id])
  stockGroupId      Int?
  OrderStock        OrderStock[]     @relation("orig")
}

model TradePrice {
  orderId       Int     @unique
  order         Order   @relation(fields: [orderId], references: [id])
  companyId     Int
  company       Company @relation(fields: [companyId], references: [id])
  suppliedPrice Float   @default(0)
  vatPrice      Float   @default(0)
  isBookClosed  Boolean @default(false)

  orderStockTradePrice OrderStockTradePrice?

  @@id([orderId, companyId])
}

model OrderStockTradePrice {
  orderId                  Int
  companyId                Int
  Company                  Company                   @relation(fields: [companyId], references: [id])
  tradePrice               TradePrice                @relation(fields: [orderId, companyId], references: [orderId, companyId])
  officialPriceType        OfficialPriceType         @default(NONE)
  officialPrice            Float                     @default(0)
  officialPriceUnit        PriceUnit
  discountType             DiscountType              @default(DEFAULT)
  discountPrice            Float                     @default(0)
  unitPrice                Float                     @default(0)
  unitPriceUnit            PriceUnit
  processPrice             Float                     @default(0)
  orderStockTradeAltBundle OrderStockTradeAltBundle?

  @@id([orderId, companyId])
}

model OrderStockTradeAltBundle {
  orderId     Int
  companyId   Int
  Company     Company @relation(fields: [companyId], references: [id])
  altSizeX    Int
  altSizeY    Int
  altQuantity Int

  orderStockTradePrice OrderStockTradePrice @relation(fields: [orderId, companyId], references: [orderId, companyId])

  @@id([orderId, companyId])
}

enum TaskType {
  CONVERTING
  GUILLOTINE
  QUANTITY
}

enum PlanStatus {
  PREPARING
  PROGRESSING
  PROGRESSED
}

model Plan {
  id                      Int             @id @default(autoincrement())
  planNo                  String          @unique
  companyId               Int
  company                 Company         @relation(fields: [companyId], references: [id])
  status                  PlanStatus      @default(PREPARING)
  isDeleted               Boolean         @default(false)
  memo                    String          @default("")
  createdAt               DateTime        @default(now())
  task                    Task[]
  stockEventIn            StockEvent[]    @relation("StockEventInPlan")
  stockEventOut           StockEvent[]    @relation("StockEventOutPlan")
  orderStock              OrderStock?
  targetStockGroupEventId Int             @unique
  targetStockGroupEvent   StockGroupEvent @relation(fields: [targetStockGroupEventId], references: [id])
  invoice                 Invoice[]
}

enum TaskStatus {
  PREPARING
  PROGRESSING
  PROGRESSED
}

model Task {
  id             Int             @id @default(autoincrement())
  taskNo         String          @unique
  planId         Int
  plan           Plan            @relation(fields: [planId], references: [id])
  type           TaskType
  isDeleted      Boolean         @default(false)
  status         TaskStatus
  taskConverting TaskConverting?
  taskGuillotine TaskGuillotine?
  taskQuantity   TaskQuantity?
  parentTaskId   Int?
  parentTask     Task?           @relation("TaskRelation", fields: [parentTaskId], references: [id])
  childTasks     Task[]          @relation("TaskRelation")
}

model TaskConverting {
  taskId Int    @id
  task   Task   @relation(fields: [taskId], references: [id])
  sizeX  Int
  sizeY  Int
  memo   String
}

model TaskGuillotine {
  taskId Int    @id
  task   Task   @relation(fields: [taskId], references: [id])
  sizeX  Int
  sizeY  Int
  memo   String
}

model TaskQuantity {
  taskId   Int  @id
  task     Task @relation(fields: [taskId], references: [id])
  quantity Int
}

model Shipping {
  id         Int       @id @default(autoincrement())
  shippingNo String    @unique
  companyId  Int
  company    Company   @relation(fields: [companyId], references: [id])
  invoice    Invoice[]
}

enum InvoiceStatus {
  // 상차대기
  WAIT_LOADING
  // 배송대기
  WAIT_SHIPPING
  // 배송중
  ON_SHIPPING
  // 배송완료
  DONE_SHIPPING
}

model Invoice {
  id                Int              @id @default(autoincrement())
  invoiceNo         String           @unique
  shippingId        Int?
  shipping          Shipping?        @relation(fields: [shippingId], references: [id])
  productId         Int
  product           Product          @relation(fields: [productId], references: [id])
  packagingId       Int
  packaging         Packaging        @relation(fields: [packagingId], references: [id])
  grammage          Int
  sizeX             Int
  sizeY             Int
  paperColorGroupId Int?
  paperColorGroup   PaperColorGroup? @relation(fields: [paperColorGroupId], references: [id])
  paperColorId      Int?
  paperColor        PaperColor?      @relation(fields: [paperColorId], references: [id])
  paperPatternId    Int?
  paperPattern      PaperPattern?    @relation(fields: [paperPatternId], references: [id])
  paperCertId       Int?
  paperCert         PaperCert?       @relation(fields: [paperCertId], references: [id])
  quantity          Int
  planId            Int
  plan              Plan             @relation(fields: [planId], references: [id])
  invoiceStatus     InvoiceStatus    @default(WAIT_LOADING)
}

enum AccountType {
  /// 예금
  DEPOSIT
}

/// 은행
enum Bank {
  /// 카카오뱅크
  KAKAO_BANK
  /// 국민은행
  KOOKMIN_BANK
  /// 기업은행
  KEB_HANA_BANK
  /// NH농협은행
  NH_BANK
  /// 신한은행
  SHINHAN_BANK
  /// 산업은행
  IBK
  /// 우리은행
  WOORI_BANK
  /// 한국씨티은행
  CITI_BANK_KOREA
  /// 하나은행
  HANA_BANK
  /// SC제일은행
  SC_FIRST_BANK
  /// 경남은행
  KYONGNAM_BANK
  /// 광주은행
  KWANGJU_BANK
  /// 대구은행
  DAEGU_BANK
  /// 도이치은행
  DEUTSCHE_BANK
  /// 뱅크오브아메리카
  BANK_OF_AMERICA
  /// 부산은행
  BUSAN_BANK
  /// 산림조합중앙회
  NACF
  /// 저축은행
  SAVINGS_BANK
  /// 새마을금고중앙회
  NACCSF
  /// 수협은행
  SUHYUP_BANK
  /// 신협중앙회
  NACUFOK
  /// 우체국
  POST_OFFICE
  /// 전북은행
  JEONBUK_BANK
  /// 제주은행
  JEJU_BANK
  /// 케이뱅크
  K_BANK
  /// 토스뱅크
  TOS_BANK
}

model BankAccount {
  /// 계좌 ID
  id            Int         @id @default(autoincrement())
  /// 회사 식별자
  companyId     Int
  /// 회사
  company       Company     @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  /// 은행
  bankComapny   Bank
  /// 계좌명
  accountName   String      @db.VarChar(30)
  /// 계좌 유형
  accountType   AccountType
  /// 계좌 번호
  accountNumber String      @db.VarChar(30)
  /// 예금주명
  accountHolder String      @db.VarChar(50)
  /// 삭제 여부
  isDeleted     Boolean     @default(false)

  /// 회계 계좌
  byBankAccountList ByBankAccount[]
}

/// 카드사
enum CardCompany {
  /// BC카드
  BC_CARD
  /// KB국민카드
  KB_CARD
  /// 삼성카드
  SAMSUNG_CARD
  /// 신한카드
  SHINHAN_CARD
  /// 우리카드
  WOORI_CARD
  /// 하나카드
  HANA_CARD
  /// 롯데카드
  LOTTE_CARD
  /// 현대카드
  HYUNDAI_CARD
  /// NH농협카드
  NH_CARD
}

/// 카드 정보
model Card {
  /// 카드 ID
  id          Int         @id @default(autoincrement())
  /// 회사 식별자
  companyId   Int
  /// 회사
  company     Company     @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  /// 카드명
  cardName    String      @db.VarChar(50)
  /// 카드사
  cardCompany CardCompany
  /// 카드 번호
  cardNumber  String      @db.VarChar(50)
  /// 소유주명
  cardHolder  String      @db.VarChar(50)
  /// 삭제 여부
  isDeleted   Boolean     @default(false)

  /// 카드
  byCardList ByCard[]
}

/// 계정 수단
enum Method {
  /// 계좌 이체
  ACCOUNT_TRANSFER
  /// 어음
  PROMISSORY_NOTE
  /// 카드
  CARD_PAYMENT
  /// 현금
  CASH
  /// 상계
  OFFSET
  /// 기타
  ETC
  /// 전체
  All
}

/// 회계 타입
enum AccountedType {
  /// 지급
  PAID
  /// 수금
  COLLECTED
}

/// 계정 과목
enum Subject {
  /// paid: 외상 매출금 collected: 외상 매입금
  ACCOUNTS_RECEIVABLE
  /// paid: 미수금 collected: 미지급금
  UNPAID
  /// paid: 선수금 collected: 선지급금
  ADVANCES
  /// paid: 잡이익 collected: 잡손실
  MISCELLANEOUS_INCOME
  /// paid: 상품 매출 collected: 상품 매입
  PRODUCT_SALES
  /// 기타
  ETC
  /// 전체
  All
}

/// 파트너
model Partner {
  // id
  id                        Int                     @id @default(autoincrement())
  /// 회사 식별자
  companyId                 Int
  /// 회사
  company                   Company                 @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  /// 거래처 사업자 등록번호
  companyRegistrationNumber String
  /// 파트너 닉네임(회사 닉네임)
  partnerNickName           String                  @db.VarChar(100)
  /// 여신한도
  /// 매입 고시가적용 구분
  /// 매출 고시가적용 구분
  /// 메모
  memo                      String                  @db.VarChar(500)
  /// 삭제 여부
  isDeleted                 Boolean                 @default(false)
  /// 회계 목록
  accountedList             Accounted[]
  discountRateCondition     DiscountRateCondition[]

  @@unique([companyId, companyRegistrationNumber])
}

/// 회계
model Accounted {
  /// 식별자
  id               Int           @id @default(autoincrement())
  /// 회계 타입
  accountedType    AccountedType
  /// 회계 수단
  accountedMethod  Method
  /// 회계 등록일
  accountedDate    DateTime      @default(now())
  /// 계정 과목
  accountedSubject Subject
  /// 메모
  memo             String        @db.VarChar(500)
  /// 삭제 여부
  isDeleted        Boolean       @default(false)
  /// 파트너 식별자
  partnerId        Int
  /// 파트너
  partner          Partner       @relation(fields: [partnerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  /// 현금
  byCash        ByCash?
  /// 기타
  byEtc         ByEtc?
  // 계좌
  byBankAccount ByBankAccount?
  /// 카드
  byCard        ByCard?
  /// 상계
  byOffset      ByOffset?
}

/// 현금
model ByCash {
  /// 식별자
  id          Int       @id @default(autoincrement())
  /// 금액
  cashAmount  Int
  /// 삭제 여부
  isDeleted   Boolean   @default(false)
  /// 회계 식별자
  accountedId Int       @unique
  /// 회계
  accounted   Accounted @relation(fields: [accountedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ByEtc {
  /// 식별자
  id          Int       @id @default(autoincrement())
  /// 금액
  etcAmount   Int
  /// 삭제 여부
  isDeleted   Boolean   @default(false)
  /// 회계 식별자
  accountedId Int       @unique
  /// 회계
  accounted   Accounted @relation(fields: [accountedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// 계좌
model ByBankAccount {
  /// 식별자
  id                Int         @id @default(autoincrement())
  /// 금액
  bankAccountAmount Int
  /// 삭제 여부
  isDeleted         Boolean     @default(false)
  /// 회계 식별자
  accountedId       Int         @unique
  /// 회계
  accounted         Accounted   @relation(fields: [accountedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  /// 계좌 식별자
  bankAccountId     Int
  /// 계좌
  bankAccount       BankAccount @relation(fields: [bankAccountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// 카드
model ByCard {
  /// 식별자
  id             Int       @id @default(autoincrement())
  /// 금액
  cardAmount     Int
  /// 수수료 금액
  chargeAmount   Int
  /// 수수료 합 or 뺀 금액(지급, 수급에 따라 변경)
  totalAmount    Int
  /// 수수료 여부
  isCharge       Boolean   @default(false)
  /// 승인번호
  approvalNumber String
  /// 삭제 여부
  isDeleted      Boolean   @default(false)
  /// 회계 식별자
  accountedId    Int       @unique
  /// 회계
  accounted      Accounted @relation(fields: [accountedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  /// 계좌 식별자
  cardId         Int
  /// 계좌
  card           Card      @relation(fields: [cardId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// 상계
model ByOffset {
  /// 식별자
  id           Int           @id @default(autoincrement())
  /// 금액
  offsetAmount Int
  /// 삭제 여부
  isDeleted    Boolean       @default(false)
  /// 회계 식별자
  accountedId  Int           @unique
  /// 회계
  accounted    Accounted     @relation(fields: [accountedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  /// 상계 '지급' 식별자
  offsetPair   ByOffsetPair?
}

model ByOffsetPair {
  /// 식별자
  id             Int      @id @default(autoincrement())
  /// 'paid' 거래의 ID
  paidId         Int
  /// 'collected' 거래의 ID
  collectedId    Int
  /// 상계 매핑
  byOffsetPairId Int      @unique
  /// 'paid' 거래
  byOffsetPair   ByOffset @relation(fields: [byOffsetPairId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // 할인율
}

model DiscountRateCondition {
  /// 식별자
  id                Int               @id @default(autoincrement())
  /// 파트너
  partnerId         Int
  partner           Partner           @relation(fields: [partnerId], references: [id])
  /// 포장
  packagingType     PackagingType?
  /// 제품유형
  paperDomainId     Int?
  paperDomain       PaperDomain?      @relation(fields: [paperDomainId], references: [id])
  /// 제지사
  manufacturerId    Int?
  manufacturer      Manufacturer?     @relation(fields: [manufacturerId], references: [id])
  /// 지군
  paperGroupId      Int?
  paperGroup        PaperGroup?       @relation(fields: [paperGroupId], references: [id])
  /// 지종
  paperTypeId       Int?
  paperType         PaperType?        @relation(fields: [paperTypeId], references: [id])
  /// 평량
  grammage          Int?
  /// 지장
  sizeX             Int?
  /// 지폭
  sizeY             Int?
  /// 색군
  paperColorGroupId Int?
  paperColorGroup   PaperColorGroup?  @relation(fields: [paperColorGroupId], references: [id])
  /// 색상
  paperColorId      Int?
  paperColor        PaperColor?       @relation(fields: [paperColorId], references: [id])
  /// 무늬
  paperPatternId    Int?
  paperPattern      PaperPattern?     @relation(fields: [paperPatternId], references: [id])
  // 인증
  paperCertId       Int?
  paperCert         PaperCert?        @relation(fields: [paperCertId], references: [id])
  discountRateMap   DiscountRateMap[]
}

enum DiscountRateMapType {
  BASIC
  SPECIAL
}

enum DiscountRateUnit {
  WON_PER_TON
  WON_PER_REAM
  WON_PER_BOX
  PERCENT
}

enum DiscountRateType {
  SALES
  PURCHASE
}

model DiscountRateMap {
  /// 식별자
  id                      Int                   @id @default(autoincrement())
  /// 할인율 조건
  discountRateConditionId Int
  discountRateCondition   DiscountRateCondition @relation(fields: [discountRateConditionId], references: [id])
  /// 할인율 타입 (매입/매출)
  discountRateType        DiscountRateType
  /// 할인율 타입
  discountRateMapType     DiscountRateMapType
  /// 할인율
  discountRate            Float
  /// 할인율 단위
  discountRateUnit        DiscountRateUnit
  /// 삭제여부
  isDeleted               Boolean               @default(false)

  @@unique([discountRateConditionId, discountRateMapType, discountRateType])
}
