// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Paper Specs

model PaperDomain {
  id      Int       @id @default(autoincrement())
  name    String
  Product Product[]
}

model Manufacturer {
  id      Int       @id @default(autoincrement())
  name    String
  product Product[]
}

model PaperGroup {
  id      Int       @id @default(autoincrement())
  name    String
  product Product[]
}

model PaperType {
  id      Int       @id @default(autoincrement())
  name    String
  product Product[]
}

model PaperColorGroup {
  id                     Int                      @id @default(autoincrement())
  name                   String
  Stock                  Stock[]
  StockGroup             StockGroup[]
  Invoice                Invoice[]
  OrderStock             OrderStock[]
  OfficialPriceCondition OfficialPriceCondition[]
}

model PaperColor {
  id                     Int                      @id @default(autoincrement())
  name                   String
  Stock                  Stock[]
  StockGroup             StockGroup[]
  Invoice                Invoice[]
  OrderStock             OrderStock[]
  OfficialPriceCondition OfficialPriceCondition[]
}

model PaperPattern {
  id                     Int                      @id @default(autoincrement())
  name                   String
  Stock                  Stock[]
  StockGroup             StockGroup[]
  Invoice                Invoice[]
  OrderStock             OrderStock[]
  OfficialPriceCondition OfficialPriceCondition[]
}

model PaperCert {
  id                     Int                      @id @default(autoincrement())
  name                   String
  Stock                  Stock[]
  StockGroup             StockGroup[]
  Invoice                Invoice[]
  OrderStock             OrderStock[]
  OfficialPriceCondition OfficialPriceCondition[]
}

enum PackagingType {
  SKID
  REAM
  BOX
  ROLL
}

model Packaging {
  id         Int           @id @default(autoincrement())
  name       String
  type       PackagingType
  packA      Int
  packB      Int
  stock      Stock[]
  StockGroup StockGroup[]
  Invoice    Invoice[]
  OrderStock OrderStock[]

  @@unique([type, packA, packB])
}

model Product {
  id                     Int                      @id @default(autoincrement())
  paperDomainId          Int
  paperDomain            PaperDomain              @relation(fields: [paperDomainId], references: [id])
  manufacturerId         Int
  manufacturer           Manufacturer             @relation(fields: [manufacturerId], references: [id])
  paperGroupId           Int
  paperGroup             PaperGroup               @relation(fields: [paperGroupId], references: [id])
  paperTypeId            Int
  paperType              PaperType                @relation(fields: [paperTypeId], references: [id])
  stock                  Stock[]
  StockGroup             StockGroup[]
  Invoice                Invoice[]
  OrderStock             OrderStock[]
  OfficialPriceCondition OfficialPriceCondition[]

  @@index([paperDomainId], type: BTree)
  @@index([manufacturerId], type: BTree)
  @@index([paperGroupId], type: BTree)
  @@index([paperTypeId], type: BTree)
}

// Warehouse

model Warehouse {
  id         Int          @id @default(autoincrement())
  name       String
  code       String?
  address    String       @default("") @db.VarChar(500)
  companyId  Int
  company    Company      @relation(fields: [companyId], references: [id])
  isPublic   Boolean
  isDeleted  Boolean      @default(false)
  stock      Stock[]
  StockGroup StockGroup[]
  OrderStock OrderStock[]

  @@unique([companyId, code])
}

// Stock

model Stock {
  id                      Int              @id @default(autoincrement())
  serial                  String           @unique
  companyId               Int
  company                 Company          @relation(fields: [companyId], references: [id])
  warehouseId             Int?
  warehouse               Warehouse?       @relation(fields: [warehouseId], references: [id])
  productId               Int
  product                 Product          @relation(fields: [productId], references: [id])
  packagingId             Int
  packaging               Packaging        @relation(fields: [packagingId], references: [id])
  grammage                Int
  sizeX                   Int
  sizeY                   Int
  paperColorGroupId       Int?
  paperColorGroup         PaperColorGroup? @relation(fields: [paperColorGroupId], references: [id])
  paperColorId            Int?
  paperColor              PaperColor?      @relation(fields: [paperColorId], references: [id])
  paperPatternId          Int?
  paperPattern            PaperPattern?    @relation(fields: [paperPatternId], references: [id])
  paperCertId             Int?
  paperCert               PaperCert?       @relation(fields: [paperCertId], references: [id])
  stockEvent              StockEvent[]
  cachedQuantity          Int              @default(0)
  cachedQuantityAvailable Int              @default(0)
  isDeleted               Boolean          @default(false)
  isSyncPrice             Boolean          @default(false)
  stockPrice              StockPrice[]

  @@index([packagingId], type: BTree)
  @@index([paperColorGroupId], type: BTree)
  @@index([paperColorId], type: BTree)
  @@index([paperPatternId], type: BTree)
  @@index([paperCertId], type: BTree)
}

model StockPrice {
  stockId           Int
  stock             Stock             @relation(fields: [stockId], references: [id])
  officialPriceType OfficialPriceType @default(NONE)
  officialPrice     Float             @default(0)
  officialPriceUnit PriceUnit
  discountType      DiscountType      @default(DEFAULT)
  unitPrice         Float
  discountPrice     Float             @default(0)
  unitPriceUnit     PriceUnit

  @@id([stockId])
}

enum StockEventStatus {
  NORMAL
  CANCELLED
  PENDING
}

model StockEvent {
  id                Int              @id @default(autoincrement())
  stockId           Int
  stock             Stock            @relation(fields: [stockId], references: [id])
  change            Int
  status            StockEventStatus
  orderStockArrival OrderStock[] // 입고 예정 재고의 정상 매입
  planIn            Plan[]           @relation("StockEventInPlan")
  planOut           Plan[]           @relation("StockEventOutPlan")

  @@unique([id, stockId])
}

model StockGroup {
  id                Int               @id @default(autoincrement())
  productId         Int
  product           Product           @relation(fields: [productId], references: [id])
  packagingId       Int
  packaging         Packaging         @relation(fields: [packagingId], references: [id])
  grammage          Int
  sizeX             Int
  sizeY             Int
  paperColorGroupId Int?
  paperColorGroup   PaperColorGroup?  @relation(fields: [paperColorGroupId], references: [id])
  paperColorId      Int?
  paperColor        PaperColor?       @relation(fields: [paperColorId], references: [id])
  paperPatternId    Int?
  paperPattern      PaperPattern?     @relation(fields: [paperPatternId], references: [id])
  paperCertId       Int?
  paperCert         PaperCert?        @relation(fields: [paperCertId], references: [id])
  warehouseId       Int?
  warehouse         Warehouse?        @relation(fields: [warehouseId], references: [id])
  orderStockId      Int?
  orderStock        OrderStock?       @relation("OrderStockStockGroup", fields: [orderStockId], references: [id])
  companyId         Int
  company           Company           @relation(fields: [companyId], references: [id])
  StockGroupEvent   StockGroupEvent[]
  orderStocks       OrderStock[]

  @@unique([productId, packagingId, grammage, sizeX, sizeY, paperColorGroupId, paperColorId, paperPatternId, paperCertId, warehouseId, orderStockId, companyId])
}

model StockGroupEvent {
  id           Int                   @id @default(autoincrement())
  change       Int
  status       StockGroupEventStatus
  stockGroupId Int
  stockGroup   StockGroup            @relation(fields: [stockGroupId], references: [id])
  Plan         Plan?
  planId       Int?
}

enum StockGroupEventStatus {
  NORMAL
  CANCELLED
  PENDING
}

// User

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  name      String
  email     String?
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
}

// Company & Client

model Company {
  id                             Int                           @id @default(autoincrement())
  businessName                   String
  companyRegistrationNumber      String?
  phoneNo                        String                        @default("")
  faxNo                          String                        @default("")
  email                          String                        @default("")
  representative                 String                        @default("")
  invoiceCode                    String?
  address                        String                        @default("") @db.VarChar(500)
  managedById                    Int?
  managedBy                      Company?                      @relation("CompanyManagedBy", fields: [managedById], references: [id])
  srcBusinessRelationship        BusinessRelationship[]        @relation("srcBusinessRelationship")
  dstBusinessRelationship        BusinessRelationship[]        @relation("dstBusinessRelationship")
  srcOrder                       Order[]                       @relation("srcOrderCompany")
  dstOrder                       Order[]                       @relation("dstOrderCompany")
  user                           User[]
  officialPrice                  OfficialPriceMap[]
  warehouse                      Warehouse[]
  location                       Location[]
  stock                          Stock[]
  srcBusinessRelationshipRequest BusinessRelationshipRequest[] @relation("srcBusinessRelationshipRequest")
  dstBusinessRelationshipRequest BusinessRelationshipRequest[] @relation("dstBusinessRelationshipRequest")
  managingCompany                Company[]                     @relation("CompanyManagedBy")
  OrderSrockTradePrice           OrderStockTradePrice[]
  Plan                           Plan[]
  Shipping                       Shipping[]
  StockGroup                     StockGroup[]
  TradePrice                     TradePrice[]
  OrderStockTradeAltBundle       OrderStockTradeAltBundle[]
  Partner                        Partner[]
}

model BusinessRelationship {
  srcCompanyId Int
  srcCompany   Company @relation("srcBusinessRelationship", fields: [srcCompanyId], references: [id])
  dstCompanyId Int
  dstCompany   Company @relation("dstBusinessRelationship", fields: [dstCompanyId], references: [id])

  @@id([srcCompanyId, dstCompanyId])
}

enum BusinessRelationshipRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model BusinessRelationshipRequest {
  srcCompanyId Int
  srcCompany   Company                           @relation("srcBusinessRelationshipRequest", fields: [srcCompanyId], references: [id])
  dstCompanyId Int
  dstCompany   Company                           @relation("dstBusinessRelationshipRequest", fields: [dstCompanyId], references: [id])
  status       BusinessRelationshipRequestStatus
  memo         String

  @@unique([srcCompanyId, dstCompanyId])
}

model Location {
  id         Int          @id @default(autoincrement())
  name       String
  code       String?
  address    String       @default("") @db.VarChar(500)
  companyId  Int
  company    Company      @relation(fields: [companyId], references: [id])
  isPublic   Boolean
  isDeleted  Boolean      @default(false)
  orderStock OrderStock[] // 정상거래의 도착지

  @@unique([companyId, code])
}

// Prices

enum OfficialPriceType {
  NONE
  MANUAL_NONE
  MANUAL_DEFAULT
  RETAIL
  WHOLESALE
}

enum DiscountType {
  DEFAULT
  SPECIAL
}

enum PriceUnit {
  WON_PER_TON
  WON_PER_REAM
  WON_PER_BOX
}

// 고시가
enum OfficialPriceMapType {
  WHOLESALE
  RETAIL
}

model OfficialPriceCondition {
  id                Int                @id @default(autoincrement())
  productId         Int
  product           Product            @relation(fields: [productId], references: [id])
  grammage          Int
  sizeX             Int
  sizeY             Int
  paperColorGroupId Int?
  paperColorGroup   PaperColorGroup?   @relation(fields: [paperColorGroupId], references: [id])
  paperColorId      Int?
  paperColor        PaperColor?        @relation(fields: [paperColorId], references: [id])
  paperPatternId    Int?
  paperPattern      PaperPattern?      @relation(fields: [paperPatternId], references: [id])
  paperCertId       Int?
  paperCert         PaperCert?         @relation(fields: [paperCertId], references: [id])
  officialPriceMap  OfficialPriceMap[]
}

model OfficialPriceMap {
  id                       Int                    @id @default(autoincrement())
  officialPriceConditionId Int
  officialPriceCondition   OfficialPriceCondition @relation(fields: [officialPriceConditionId], references: [id])
  companyId                Int
  company                  Company                @relation(fields: [companyId], references: [id])
  officialPriceMapType     OfficialPriceMapType
  officialPrice            Float
  officialPriceUnit        PriceUnit
  isDeleted                Boolean                @default(false)
}

// Order

enum OrderStatus {
  ORDER_PREPARING
  ORDER_REQUESTED
  ORDER_REJECTED
  OFFER_PREPARING
  OFFER_REQUESTED
  OFFER_REJECTED
  ACCEPTED
  ORDER_CANCELLED
  OFFER_CANCELLED
}

model Order {
  id                     Int          @id @default(autoincrement())
  orderNo                String       @unique
  srcCompanyId           Int
  srcCompany             Company      @relation("srcOrderCompany", fields: [srcCompanyId], references: [id])
  dstCompanyId           Int
  dstCompany             Company      @relation("dstOrderCompany", fields: [dstCompanyId], references: [id])
  status                 OrderStatus  @default(ORDER_PREPARING)
  isEntrusted            Boolean      @default(false)
  memo                   String
  wantedDate             DateTime?
  stockAcceptedCompanyId Int?
  isStockRejected        Boolean      @default(false)
  orderStock             OrderStock?
  tradePrice             TradePrice[]
}

model OrderStock {
  id                Int              @id @default(autoincrement())
  orderId           Int              @unique
  order             Order            @relation(fields: [orderId], references: [id])
  dstLocationId     Int?
  dstLocation       Location?        @relation(fields: [dstLocationId], references: [id])
  planId            Int?             @unique
  plan              Plan?            @relation(fields: [planId], references: [id])
  // 정상매입의 입고 예정 재고 이벤트
  arrivalStockEvent StockEvent[]
  // 정상거래의 주문 원지 정보
  warehouseId       Int?
  warehouse         Warehouse?       @relation(fields: [warehouseId], references: [id])
  orderStockId      Int?
  orderStock        OrderStock?      @relation("orig", fields: [orderStockId], references: [id])
  productId         Int
  product           Product          @relation(fields: [productId], references: [id])
  packagingId       Int
  packaging         Packaging        @relation(fields: [packagingId], references: [id])
  grammage          Int
  sizeX             Int
  sizeY             Int
  paperColorGroupId Int?
  paperColorGroup   PaperColorGroup? @relation(fields: [paperColorGroupId], references: [id])
  paperColorId      Int?
  paperColor        PaperColor?      @relation(fields: [paperColorId], references: [id])
  paperPatternId    Int?
  paperPattern      PaperPattern?    @relation(fields: [paperPatternId], references: [id])
  paperCertId       Int?
  paperCert         PaperCert?       @relation(fields: [paperCertId], references: [id])
  quantity          Int              @default(0)
  stockGroups       StockGroup[]     @relation("OrderStockStockGroup")
  StockGroup        StockGroup?      @relation(fields: [stockGroupId], references: [id])
  stockGroupId      Int?
  OrderStock        OrderStock[]     @relation("orig")
}

model TradePrice {
  orderId       Int     @unique
  order         Order   @relation(fields: [orderId], references: [id])
  companyId     Int
  company       Company @relation(fields: [companyId], references: [id])
  suppliedPrice Float   @default(0)
  vatPrice      Float   @default(0)
  isBookClosed  Boolean @default(false)

  orderStockTradePrice OrderStockTradePrice?

  @@id([orderId, companyId])
}

model OrderStockTradePrice {
  orderId                  Int
  companyId                Int
  Company                  Company                   @relation(fields: [companyId], references: [id])
  tradePrice               TradePrice                @relation(fields: [orderId, companyId], references: [orderId, companyId])
  officialPriceType        OfficialPriceType         @default(NONE)
  officialPrice            Float                     @default(0)
  officialPriceUnit        PriceUnit
  discountType             DiscountType              @default(DEFAULT)
  discountPrice            Float                     @default(0)
  unitPrice                Float                     @default(0)
  unitPriceUnit            PriceUnit
  processPrice             Float                     @default(0)
  orderStockTradeAltBundle OrderStockTradeAltBundle?

  @@id([orderId, companyId])
}

model OrderStockTradeAltBundle {
  orderId     Int
  companyId   Int
  Company     Company @relation(fields: [companyId], references: [id])
  altSizeX    Int
  altSizeY    Int
  altQuantity Int

  orderStockTradePrice OrderStockTradePrice @relation(fields: [orderId, companyId], references: [orderId, companyId])

  @@id([orderId, companyId])
}

enum TaskType {
  CONVERTING
  GUILLOTINE
  QUANTITY
}

enum PlanStatus {
  PREPARING
  PROGRESSING
  PROGRESSED
}

model Plan {
  id                      Int             @id @default(autoincrement())
  planNo                  String          @unique
  companyId               Int
  company                 Company         @relation(fields: [companyId], references: [id])
  status                  PlanStatus      @default(PREPARING)
  isDeleted               Boolean         @default(false)
  memo                    String          @default("")
  createdAt               DateTime        @default(now())
  task                    Task[]
  stockEventIn            StockEvent[]    @relation("StockEventInPlan")
  stockEventOut           StockEvent[]    @relation("StockEventOutPlan")
  orderStock              OrderStock?
  targetStockGroupEventId Int             @unique
  targetStockGroupEvent   StockGroupEvent @relation(fields: [targetStockGroupEventId], references: [id])
  invoice                 Invoice[]
}

enum TaskStatus {
  PREPARING
  PROGRESSING
  PROGRESSED
}

model Task {
  id             Int             @id @default(autoincrement())
  taskNo         String          @unique
  planId         Int
  plan           Plan            @relation(fields: [planId], references: [id])
  type           TaskType
  isDeleted      Boolean         @default(false)
  status         TaskStatus
  taskConverting TaskConverting?
  taskGuillotine TaskGuillotine?
  taskQuantity   TaskQuantity?
  parentTaskId   Int?
  parentTask     Task?           @relation("TaskRelation", fields: [parentTaskId], references: [id])
  childTasks     Task[]          @relation("TaskRelation")
}

model TaskConverting {
  taskId Int    @id
  task   Task   @relation(fields: [taskId], references: [id])
  sizeX  Int
  sizeY  Int
  memo   String
}

model TaskGuillotine {
  taskId Int    @id
  task   Task   @relation(fields: [taskId], references: [id])
  sizeX  Int
  sizeY  Int
  memo   String
}

model TaskQuantity {
  taskId   Int  @id
  task     Task @relation(fields: [taskId], references: [id])
  quantity Int
}

model Shipping {
  id         Int       @id @default(autoincrement())
  shippingNo String    @unique
  companyId  Int
  company    Company   @relation(fields: [companyId], references: [id])
  invoice    Invoice[]
}

model Invoice {
  id                Int              @id @default(autoincrement())
  invoiceNo         String           @unique
  shippingId        Int?
  shipping          Shipping?        @relation(fields: [shippingId], references: [id])
  productId         Int
  product           Product          @relation(fields: [productId], references: [id])
  packagingId       Int
  packaging         Packaging        @relation(fields: [packagingId], references: [id])
  grammage          Int
  sizeX             Int
  sizeY             Int
  paperColorGroupId Int?
  paperColorGroup   PaperColorGroup? @relation(fields: [paperColorGroupId], references: [id])
  paperColorId      Int?
  paperColor        PaperColor?      @relation(fields: [paperColorId], references: [id])
  paperPatternId    Int?
  paperPattern      PaperPattern?    @relation(fields: [paperPatternId], references: [id])
  paperCertId       Int?
  paperCert         PaperCert?       @relation(fields: [paperCertId], references: [id])
  quantity          Int
  planId            Int
  plan              Plan             @relation(fields: [planId], references: [id])
}

/// 계정 수단
enum Method {
  /// 계좌 이체
  ACCOUNT_TRANSFER
  /// 어음
  PROMISSORY_NOTE
  /// 카드
  CARD_PAYMENT
  /// 현금
  CASH
  /// 상계
  SET_OFF
  /// 기타
  ETC
  /// 전체
  All
}

/// 회계 타입
enum AccountedType {
  /// 지급
  PAID
  /// 수금
  COLLECTED
}

/// 계정 과목
enum Subject {
  /// 외상 매출금
  PAID_ACCOUNTS_RECEIVABLE
  /// 미수금
  PAID_UNPAID_AMOUNTS
  /// 선수금
  PAID_ADVANCES
  /// 잡이익
  PAID_MISCELLANEOUS_INCOME
  /// 상품 매출
  PAID_PRODUCT_SALES
  /// 외상 매입금
  COLLECTED_ACCOUNTS_RECEIVABLE
  /// 미지급금
  COLLECTED_UNPAID_EXPENSES
  /// 선지급금
  COLLECTED_PREPAID_EXPENSES
  //// 잡손실
  COLLECTED_MISCELLANEOUS_LOSSES
  /// 상품 매입"
  COLLECTED_PRODUCT_PURCHASES
  /// 기타 (공통)
  ETC
  /// 전체
  All
}

/// 파트너
model Partner {
  /// 식별자
  id              Int         @id @default(autoincrement())
  /// 파트너 닉네임(회사 닉네임)
  partnerNickName String      @map("partner_nick_name") @db.VarChar(100)
  /// 메모
  memo            String      @map("memo") @db.VarChar(500)
  /// 삭제 여부
  isDeleted       Boolean     @default(false) @map("is_deleted")
  /// 회사 식별자
  companyId       Int         @map("company_id")
  /// 회사
  company         Company     @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  /// 등록자 아이디
  regId           String?     @map("reg_id") @db.VarChar(255)
  /// 등록자 명
  regNm           String?     @map("reg_nm") @db.VarChar(255)
  /// 변경자 아이디
  chgId           String?     @map("chg_id") @db.VarChar(255)
  /// 변경자 명
  chgNm           String?     @map("chg_nm") @db.VarChar(255)
  /// 변경 일시
  chgDt           DateTime    @updatedAt @map("chg_dt")
  /// 등록 일시
  regDt           DateTime    @default(now()) @map("reg_dt")
  /// 회계 목록
  accountedList   Accounted[]

  @@map("partner")
}

/// 회계
model Accounted {
  /// 식별자
  id               Int           @id @default(autoincrement())
  /// 회계 타입
  accountedType    AccountedType @map("accounted_type")
  /// 회계 수단
  accountedMethod  Method        @map("accounted_method")
  /// 회계 등록일
  accountedDate    DateTime      @default(now()) @map("accounted_date")
  /// 계정 과목
  accountedSubject Subject       @map("accounted_subject")
  /// 메모
  memo             String        @map("memo") @db.VarChar(500)
  /// 삭제 여부
  isDeleted        Boolean       @default(false) @map("is_deleted")
  /// 파트너 식별자
  partnerId        Int           @map("partner_id")
  /// 파트너
  partner          Partner       @relation(fields: [partnerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  /// 등록자 아이디
  regId            String?       @map("reg_id") @db.VarChar(255)
  /// 등록자 명
  regNm            String?       @map("reg_nm") @db.VarChar(255)
  /// 변경자 아이디
  chgId            String?       @map("chg_id") @db.VarChar(255)
  /// 변경자 명
  chgNm            String?       @map("chg_nm") @db.VarChar(255)
  /// 변경 일시
  chgDt            DateTime      @updatedAt @map("chg_dt")
  /// 등록 일시
  regDt            DateTime      @default(now()) @map("reg_dt")

  /// 지급 현금 결제
  byCash ByCash?
  /// 지급 기타
  byEtc  ByEtc?

  @@map("accounted")
}

/// 현금
model ByCash {
  /// 식별자
  id          Int       @id @default(autoincrement())
  /// 식별자
  cashAmount  Int       @map("cash_amount")
  /// 삭제 여부
  isDeleted   Boolean   @default(false) @map("is_deleted")
  /// 파트너 식별자
  accountedId Int       @unique @map("accounted_id")
  /// 파트너
  accounted   Accounted @relation(fields: [accountedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  /// 등록자 아이디
  regId       String?   @map("reg_id") @db.VarChar(255)
  /// 등록자 명
  regNm       String?   @map("reg_nm") @db.VarChar(255)
  /// 변경자 아이디
  chgId       String?   @map("chg_id") @db.VarChar(255)
  /// 변경자 명
  chgNm       String?   @map("chg_nm") @db.VarChar(255)
  /// 변경 일시
  chgDt       DateTime  @updatedAt @map("chg_dt")
  /// 등록 일시
  regDt       DateTime  @default(now()) @map("reg_dt")

  @@map("by_cash")
}

model ByEtc {
  /// 식별자
  id          Int       @id @default(autoincrement())
  /// 식별자
  etcAmount   Int       @map("etc_amount")
  /// 삭제 여부
  isDeleted   Boolean   @default(false) @map("is_deleted")
  /// 파트너 식별자
  accountedId Int       @unique @map("accounted_id")
  /// 파트너
  accounted   Accounted @relation(fields: [accountedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  /// 등록자 아이디
  regId       String?   @map("reg_id") @db.VarChar(255)
  /// 등록자 명
  regNm       String?   @map("reg_nm") @db.VarChar(255)
  /// 변경자 아이디
  chgId       String?   @map("chg_id") @db.VarChar(255)
  /// 변경자 명
  chgNm       String?   @map("chg_nm") @db.VarChar(255)
  /// 변경 일시
  chgDt       DateTime  @updatedAt @map("chg_dt")
  /// 등록 일시
  regDt       DateTime  @default(now()) @map("reg_dt")

  @@map("by_etc")
}
