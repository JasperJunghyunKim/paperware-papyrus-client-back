name: develop deploy
on:
  push:
    branches:
      - feature/account

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: 소스코드 전환
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.DEPLOY_TOKEN }}
          submodules: true

      - name: AWS 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Amazon ECR 등록(Build, tag, and push image)
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: paperware-client-develop-back
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR so that it can be deployed to ECS.
          docker buildx build --build-arg DEVELOP_ENV=${{ secrets.DEVELOP_ENV }} --platform=linux/amd64 -t paperware-client-develop-back -f ./docker/dev/Dockerfile . --load
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: AWS Systems Manager Parameter Store 에서 Secret 가져오기
        id: secrets
        run: |
          aws ecs describe-task-definition --task-definition test_task --query taskDefinition > task-definition.json

      - name: 이미지 ID 및 AWS Secret 채우기 ECS 작업 정의
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: paperware-client-develop-back
          image: ${{ steps.build-image.outputs.image }}
          secrets: |
            - name: AWS_SECRET
              valueFrom: ${{ env.AWS_SECRET }}

      - name: 배포를 위한 AWS CodeDeploy 설정
        run: |
          aws deploy create-deployment \
            --application-name [Your_Application_Name] \
            --deployment-group-name [Your_Deployment_Group_Name] \
            --revision '{"revisionType": "S3", "s3Location": {"bucket": "[Your_Bucket_Name]", "key": "[Your_Object_Key]", "bundleType": "zip"}}' \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce
        shell: bash

      - name: ECS 작업 정의 배포
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: paperware-client-develop-back
          cluster: paperware-client-develop-cluster
          wait-for-service-stability: true
          codedeploy-appspec: appspec.json
          codedeploy-application: paperware-client-develop-back
          codedeploy-deployment-group: paperware-client-develop-back
